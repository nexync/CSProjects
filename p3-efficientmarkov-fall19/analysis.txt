Determine (from running Benchmark.java) how long it takes for BaseMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 random characters using the default file and an order 5 Markov Model. Include these timings in your report. The program also generates 4,096 characters using texts that increase in size from 487,614 characters to 4,876,140 characters (10 times the number).  In your analysis.txt file include an explanation as to whether the timings support the O(NT) analysis. Use the fact that for some runs N is fixed and T varies whereas in the other runs T is fixed and N varies.

time	source	#chars
0.135	487614	1000
0.287	487614	2000
0.454	487614	4000
1.098	487614	8000
2.203	487614	16000
4.412	487614	32000
8.745	487614	64000

0.583	487614	4096
1.097	975228	4096
1.637	1462842	4096
2.163	1950456	4096
2.724	2438070	4096
3.312	2925684	4096
3.874	3413298	4096
4.449	3900912	4096
4.987	4388526	4096
5.480	4876140	4096

Looking at the first set of time benchmarks where N, the number of characters generated, changes while T, the number of characters in the source text, stays constant, we can see a pattern. As N doubles, the time t doubles as well, suggesting that the runtime with fixed T is O(N). We can apply a similar logic to the case where T changes while N is constant and see that as T doubles, the runtime doubles as well. Thus, this supports the fact that the total runtime is O(NT) since as both change, the runtime changes linearly with both, and multiplying the two gets O(NT).

Determine (from running Benchmark.java) how long it takes for EfficientMarkov to generate 2,000, 4,000, 8,000, 16,000, and 32,000 random characters using the default file and an order 5 Markov Model. Include these timings in your report. The program also generates 4,096 characters using texts that increase in size from 487,614 characters to 4,876,140 characters (10 times the number).  In your analysis.txt file include an explanation as to whether the timings support the O(N+T) analysis.

time	source	#chars
0.101	487614	1000
0.087	487614	2000
0.111	487614	4000
0.083	487614	8000
0.095	487614	16000
0.108	487614	32000
0.093	487614	64000

0.095	487614	4096
0.157	975228	4096
0.257	1462842	4096
0.353	1950456	4096
0.610	2438070	4096
0.620	2925684	4096
0.683	3413298	4096
0.965	3900912	4096
1.022	4388526	4096
1.411	4876140	4096

As N changes while T is constant, it seems that the runtime stays about constant. This would make the runtime with constant T O(1). In the second case, where N is constant while T changes, the runtime varies about linearly. As T increases by a factor of ten, the runtime increases by a factor of about fifteen, still suggesting a linear relation between the two. Thus, it would make sense that the runtime is O(N+T) since the constant N part would be absorbed by the O(T) and thus O(N+T) = O(T). 